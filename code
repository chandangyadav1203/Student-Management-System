#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAME_LENGTH 50
#define MAX_STUDENTS 100

// Define the structure for student records
typedef struct {
    int id;
    char name[MAX_NAME_LENGTH];
    int age;
    float grade;
} Student;

void print_menu();
void add_student();
void view_students();
void edit_student();
void delete_student();
void load_data();
void save_data();
int find_student_by_id(int id);
void clear_input_buffer();

// Global variable for storing students
Student students[MAX_STUDENTS];
int total_students = 0;

int main() {
    load_data();

    int choice;
    while (1) {
        print_menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);
        clear_input_buffer();

        switch (choice) {
            case 1:
                add_student();
                break;
            case 2:
                view_students();
                break;
            case 3:
                edit_student();
                break;
            case 4:
                delete_student();
                break;
            case 5:
                save_data();
                printf("Data saved successfully.\n");
                break;
            case 6:
                printf("Exiting program...\n");
                save_data();
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}

// Function to print the main menu
void print_menu() {
    printf("\n---- Student Management System ----\n");
    printf("1. Add Student\n");
    printf("2. View Students\n");
    printf("3. Edit Student\n");
    printf("4. Delete Student\n");
    printf("5. Save Data\n");
    printf("6. Exit\n");
}

// Function to add a new student
void add_student() {
    if (total_students >= MAX_STUDENTS) {
        printf("Student limit reached. Cannot add more students.\n");
        return;
    }

    Student new_student;
    new_student.id = total_students + 1;

    printf("Enter name: ");
    fgets(new_student.name, MAX_NAME_LENGTH, stdin);
    new_student.name[strcspn(new_student.name, "\n")] = '\0';  // Remove trailing newline

    printf("Enter age: ");
    scanf("%d", &new_student.age);
    clear_input_buffer();

    printf("Enter grade: ");
    scanf("%f", &new_student.grade);
    clear_input_buffer();

    students[total_students] = new_student;
    total_students++;
    printf("Student added successfully!\n");
}

// Function to view all students
void view_students() {
    if (total_students == 0) {
        printf("No students available.\n");
        return;
    }

    printf("\n---- List of Students ----\n");
    for (int i = 0; i < total_students; i++) {
        printf("ID: %d\n", students[i].id);
        printf("Name: %s\n", students[i].name);
        printf("Age: %d\n", students[i].age);
        printf("Grade: %.2f\n\n", students[i].grade);
    }
}

// Function to edit student details
void edit_student() {
    int id;
    printf("Enter student ID to edit: ");
    scanf("%d", &id);
    clear_input_buffer();

    int index = find_student_by_id(id);
    if (index == -1) {
        printf("Student with ID %d not found.\n", id);
        return;
    }

    printf("Editing student with ID: %d\n", id);
    printf("Enter new name: ");
    fgets(students[index].name, MAX_NAME_LENGTH, stdin);
    students[index].name[strcspn(students[index].name, "\n")] = '\0';

    printf("Enter new age: ");
    scanf("%d", &students[index].age);
    clear_input_buffer();

    printf("Enter new grade: ");
    scanf("%f", &students[index].grade);
    clear_input_buffer();

    printf("Student updated successfully!\n");
}

// Function to delete a student record
void delete_student() {
    int id;
    printf("Enter student ID to delete: ");
    scanf("%d", &id);
    clear_input_buffer();

    int index = find_student_by_id(id);
    if (index == -1) {
        printf("Student with ID %d not found.\n", id);
        return;
    }

    for (int i = index; i < total_students - 1; i++) {
        students[i] = students[i + 1];
    }

    total_students--;
    printf("Student with ID %d deleted successfully.\n", id);
}

// Function to find a student by ID
int find_student_by_id(int id) {
    for (int i = 0; i < total_students; i++) {
        if (students[i].id == id) {
            return i;
        }
    }
    return -1; // Not found
}

// Function to load student data from file
void load_data() {
    FILE *file = fopen("students.dat", "rb");
    if (!file) {
        printf("No previous data found, starting fresh.\n");
        return;
    }

    fread(&total_students, sizeof(int), 1, file);
    fread(students, sizeof(Student), total_students, file);
    fclose(file);
}

// Function to save student data to file
void save_data() {
    FILE *file = fopen("students.dat", "wb");
    if (!file) {
        printf("Error saving data.\n");
        return;
    }

    fwrite(&total_students, sizeof(int), 1, file);
    fwrite(students, sizeof(Student), total_students, file);
    fclose(file);
}

// Function to clear the input buffer
void clear_input_buffer() {
    while (getchar() != '\n');
}
